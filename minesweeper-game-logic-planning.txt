


{{

	MINESWEEPER GAME LOGIC


	//game generation & rules

	1. generate grid when user clicked the PLAY button; 
    
    // element: `playBtn`

    // event: `click`

    // execution: 
      - clear the board
      - generate the grid
      - display timer (starts counting down by each second)
    
       function play() {
        clearGrid() 
        generateGrid()
      }
      function generateGrid() {
        Array(width * width).join('.').split('.').forEach(() => {
          const square = document.createElement('div')
          square.classList.add('grid-item')
          squares.push(square)
          board.appendChild(square)
        })
        //todo
        timer()
      }

      function clearGrid() {
        //todo
      } 

      function timeOut() {
        if (timeRemaining === 0) {
          // TODO game over
        }
      }

      function timer() {
        // count down by one second from 999
        setTimeout(timeOut, 999000)
      }

  2. first user click should open an empty one
    
    // element: `firstClick`

    // event: `click`

    // execution: 
    
    function startGame() {
      //TODO
    }
    function userClick() {
      //TODO
    }
    function countDown() {
      if (timeRemaining === 0) {
        finishGame()
      } else {
        timerDisplay.innerHTML = timeRemaining--
      }
    }
    function timer() {
      setTimeout(countDown, 999000)
    }


	3. randomize the distribution of 10 bombs on the board, other than the spot open; give it a class '.bomb'

	4. for each grid, look at the surrounding 8 grids, count the number of '.bomb' grids, display the number

	

	//game play (dom event)

	1. when user first clicks on board, it should open an empty grid with class '0', display nothing; 
  
   


	2. set 0 to the grids with the following indices 

		width * line - (width * (line + 1) - 1)
		width * line, (width * (line + 1) - 1)
		width * line - (width * (line + 1) - 1)
		// width = 12 (easy level) 17 (medium level) 21 (difficult level)
		// line (from 0 to width - 1)

		//still need to work out [width * line, width * (line + 1) - 1]
		//install lodash? 

		excludedNumsArr = flat(_.range(0, width, [width * line, width * (line + 1) - 1], _.range(width * 11, width * 12))


	3. generate random numbers and place bombs at those grids

		- generate 10 random number between 0 and 143 (excluding the numbers in the excludedNumArr and the clicked one) 
			generateRandomNumbers(0, 143)

		- place bombs at those random grids by adding '.bomb' class
			randomizeBombs()

	4. displaying neighboring bomb numbers

		- for each grid, count the neighboring 8 squares, if they have '.bomb' class, if so, counter++

	5. flagging the bomb

		- right click to put a flag on the grid (if user decides that there is definitely a bomb, then they flag it)

	6. end game

		- if user clicks on the bomb grid, it explodes and ends game, then user loses
		- if there is no more grid to click, i.e., all un-opened grids are flagged, then user wins

	7. reset game

		- clear board
		- reset timer
		- display button to play again



}}






















