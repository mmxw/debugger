


{{

	MINESWEEPER GAME LOGIC


	//game generation & rules

	1. SET UP GAME BOARD: generate grid when user clicked the PLAY button; 
    
    // element: `playBtn`

    // event: `click`

    // execution: 
      - clear the board
      - generate the grid
      - display timer (starts counting down by each second)

     // when user hits the `play` button, the game board is set (by clearing and generating the grid)
     //TODO add an html element for the `play` button
        function play() {
          clearGrid()
          generateGrid()
        }

        function generateGrid() {
          Array(width * width).join('.').split('.').forEach(() => {
            const square = document.createElement('div')
            square.classList.add('grid-item')
            squares.push(square)
            board.appendChild(square)
          })
          timer()
        }

        // console.log(squares) //* TESTING
        // generateGrid() //* TESTING


        function countDown() {
          if (timeRemaining === 990) {
            finishGame()
          } else {
            timerDisplay.innerHTML = timeRemaining
            timeRemaining--
            console.log(timeRemaining)
          }
        }

        // countDown() //* TESTING

        function finishGame() {
          // finish game; timer reset; 
          gameInPlay = false
          resetTimer()
          alert('GAME OVER')
        }

        function timer() {
          // count down by one second from 999
          timerID = setInterval(countDown, 1000)
          console.log('creating', timerID, new Error().stack) //* TESTING
        }

        function resetTimer() {
          clearInterval(timerID)
          console.log('clearing', timerID) //* TESTING
          timerDisplay.textContent = 0
        }

  2. USER STARTS GAME: 
    - user first click should open an empty one; 
    - then the program generates 10 random numbers between 0 and 143 (other than the clicked grid index); 
    - add '.bomb' class to these 10 grids; 
    - for each grid, look at the surrounding 8 grids, count the number of '.bomb' grids, display the number

   
  // no distinction between first click and other clicks; the only distinction is whether gameInPlay is true or not; [if use this approach go back and change the generateRandomNums(min, max) function ] 

  function clicked(e) {
    if (!gameInPlay) {
      // reveal empty grid, i.e., there are 0 bombs in the  surrounding 8 grids 
      bombCount === 0 // TODO
      clickedGrid.innerHTML = ""
      clickedGrid.addEventListener('click', (e) => {
        e.target.classList.add('empty-grid')
      }
      gameInPlay === true
      randomizeBombs() 
      )
    } else {
      // TODO if the clicked grid is an empty grid, automatically click the surrounding 8 grids 
      bombCount === 0
      automaticClick() // TODO
      // TODO for each of the 8 grids
         // if (bombCount === 0)
         clickedGrid.innerHTML = ""
         e.target.classList.add('empty-grid')
         automaticClick()
         // if (bombCount > 0) 
        clickedGrid.innerHTML = bombCount
        e.target.classList.add('nonempty-grid')   
    }
    }
  }





    
    // element: `firstClick`

    // event: `click`

    // execution: 
    
    function startGame(e) {
      //TODO
      //first click 
      
     

      randomizeBombs()

    }
    function userClick() {
      //TODO
    }

    function randomizeBombs() {

      const randomBombIndex = generateRandomNums(0, 143)

      randomBombIndex.forEach(index => squares[index].classList.add('bomb'))

    }

    function generateRandomNums(min, max) {

      const randomNumbers = new Set()

      while (randomNumbers.size < Math.sqrt(max + 1)) {
      // eslint-disable-next-line func-call-spacing
        const randomNum = Math.floor(Math.random() * (max - min + 1)) + min
      
        randomNumbers.has(excludedNumArr) || randomNumbers.has(squares.indexOf(firstClick)) ? generateRandomNums(min, max) : randomNum
      
	      randomNumbers.add(randomNum)
      }

      return randomNumbers
    }
    
  3. GAME IN PLAY: 

  4. FINSIH GAME 

  5. RESET GAME


	

	//game play (dom event)

	1. when user first clicks on board, it should open an empty grid with class '0', display nothing; 

	2. set 0 to the grids with the following indices 

		width * line - (width * (line + 1) - 1)
		width * line, (width * (line + 1) - 1)
		width * line - (width * (line + 1) - 1)
		// width = 12 (easy level) 17 (medium level) 21 (difficult level)
		// line (from 0 to width - 1)

		//still need to work out [width * line, width * (line + 1) - 1]
		//install lodash? 

		excludedNumsArr = flat(_.range(0, width, [width * line, width * (line + 1) - 1], _.range(width * 11, width * 12))


	3. generate random numbers and place bombs at those grids

		- generate 10 random number between 0 and 143 (excluding the numbers in the excludedNumArr and the clicked one) 
			generateRandomNumbers(0, 143)

		- place bombs at those random grids by adding '.bomb' class
			randomizeBombs()

	4. displaying neighboring bomb numbers

		- for each grid, count the neighboring 8 squares, if they have '.bomb' class, if so, counter++

	5. flagging the bomb

		- right click to put a flag on the grid (if user decides that there is definitely a bomb, then they flag it)

	6. end game

		- if user clicks on the bomb grid, it explodes and ends game, then user loses
		- if there is no more grid to click, i.e., all un-opened grids are flagged, then user wins

	7. reset game

		- clear board
		- reset timer
		- display button to play again



}}






















